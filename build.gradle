buildscript {

    repositories {
        jcenter()
    }

    dependencies {
        classpath 'ch.raffael.markdown-doclet:markdown-doclet:1.4'
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.16.0"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.4'
    }

}

apply plugin: 'application'
apply plugin: 'ch.raffael.markdown-doclet'
apply plugin: "com.diffplug.gradle.spotless"
apply plugin: 'com.google.protobuf'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: "jacoco"
apply plugin: 'java'

mainClassName = 'tv.mechjack.mechjackbot.main.Main'
group = 'tv.mechjack.mechjackbot'
version = '0.4.0'

repositories {
    jcenter()
}

dependencies {
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.+'
    implementation group: 'com.google.guava', name: 'guava', version: '23.+'
    implementation group: 'com.google.inject', name: 'guice', version: '4.+'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.+'
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.+'
    implementation group: 'info.picocli', name: 'picocli', version: '3.8.2'
    implementation group: 'org.mapdb', name: 'mapdb', version: '3.+'
    implementation group: 'org.kitteh.irc', name: 'client-lib', version: '4.+'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.+'
    runtimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: '1.+'
    testImplementation group: 'junit', name: 'junit', version: '4.+'
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.+'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.+'
    testImplementation group: 'pl.pragmatists', name: 'JUnitParams', version: '1.+'
    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-nop', version: '1.+'
}

build.dependsOn 'jacocoTestReport', 'spotlessApply'

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'tv/mechjack/proto/**')
        })
    }
}
spotless {
    java {
        importOrder 'java', 'javax', 'com', 'org', '', 'tv.mechjack'
        eclipse().configFile rootProject.file('src/main/resource/eclipse_java_formatter_rules.xml')
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore', '**/*.proto'
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}
