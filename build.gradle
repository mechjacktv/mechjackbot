import tv.mechjack.gradle.webpack.WebpackPlugin

buildscript {
  repositories {
    jcenter()
    maven { url "https://jitpack.io" }
  }
  dependencies {
    classpath 'ch.raffael.markdown-doclet:markdown-doclet:1.4'
    classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.16.0'
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    classpath 'com.github.mechjacktv:gradle-test-framework:0.1.0'
  }
}

subprojects {
  apply plugin: 'ch.raffael.markdown-doclet'
  apply plugin: 'com.diffplug.gradle.spotless'
  apply plugin: 'com.google.protobuf'
  apply plugin: 'idea'
  apply plugin: 'jacoco'
  apply plugin: 'java'
  apply plugin: 'tv.mechjack.gradle.testframework'
  apply plugin: WebpackPlugin

  archivesBaseName = "${rootProject.name}-${project.name}"
  group = 'tv.mechjack'
  version = System.getenv("BUILDVER") != null ? System.getenv("BUILDVER") : "DEVELOP+${System.getProperty("user.name")}.${System.currentTimeMillis()}"

  jacocoTestReport {
    afterEvaluate {
      classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: '**/ProtoMessage**')
      }))
    }
  }
  check.dependsOn 'jacocoTestReport'

  spotless {
    java {
      importOrder 'java', 'javax', 'com', 'org', '', 'tv.mechjack'
      eclipse().configFile rootProject.file('src/buildscript/eclipse_java_formatter_rules.xml')
      removeUnusedImports()
      trimTrailingWhitespace()
      endWithNewline()
    }
    format 'misc', {
      target '**/*.gradle', '**/*.md', '**/.gitignore', '**/*.proto'
      trimTrailingWhitespace()
      indentWithSpaces(2)
      endWithNewline()
    }
  }
//  compileJava.dependsOn 'spotlessApply'

  repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
  }
  dependencies {
    implementation 'com.google.code.gson:gson:2.+'
    implementation 'com.google.guava:guava:23.+'
    implementation 'com.google.inject:guice:4.+'
    implementation 'com.google.protobuf:protobuf-java:3.+'
    implementation 'org.eclipse.jetty:jetty-servlet:9.+'
    implementation 'org.slf4j:slf4j-api:1.+'
    testFrameworkImplementation 'com.github.mechjacktv:java-test-framework:0.2.0'
    testFrameworkImplementation 'junit:junit:4.+'
    testFrameworkImplementation 'org.assertj:assertj-core:3.+'
    testFrameworkImplementation 'pl.pragmatists:JUnitParams:1.+'
    testRuntimeOnly 'org.slf4j:slf4j-nop:1.+'
  }
}

/*******************************
 * PLATFORM PROJECTS
 */

project(':platform') {
  archivesBaseName = "mechjack-${project.name}"

  dependencies {
    implementation 'com.google.inject.extensions:guice-servlet:4.+'
    implementation 'org.eclipse.jetty:jetty-server:9.+'
    implementation 'org.eclipse.jetty:jetty-servlet:9.+'
    implementation 'org.mapdb:mapdb:3.+'
  }
}

project(':protobuf') {
  archivesBaseName = "mechjack-${project.name}"

  dependencies {
    implementation project(':platform')
    implementation 'com.google.protobuf:protobuf-java-util:3.+'
    testFrameworkImplementation project(path: ':platform', configuration: 'testFramework')
  }
}

/*******************************
 * BASE PROJECT
 */

project(':base') {
  dependencies {
    implementation project(':platform')
    implementation project(':protobuf')
    implementation 'info.picocli:picocli:3.8.2'
    implementation 'org.kitteh.irc:client-lib:5.+'
    testFrameworkImplementation project(path: ':platform', configuration: 'testFramework')
    runtimeOnly 'org.slf4j:slf4j-simple:1.+'
  }
}

/*******************************
 * FEATURE PROJECTS
 */

project(':feature:core') {
  dependencies {
    implementation project(':base')
    implementation project(':platform')
    implementation 'info.picocli:picocli:3.8.2'
    testFrameworkImplementation project(path: ':base', configuration: 'testFramework')
    testFrameworkImplementation project(path: ':platform', configuration: 'testFramework')
  }
}

project(':feature:customcommands') {
  dependencies {
    implementation project(':base')
    implementation project(':platform')
    implementation project(':protobuf')
    implementation 'info.picocli:picocli:3.8.2'
    testFrameworkImplementation project(path: ':base', configuration: 'testFramework')
    testFrameworkImplementation project(path: ':platform', configuration: 'testFramework')
    testFrameworkImplementation project(path: ':protobuf', configuration: 'testFramework')
  }
}

project(':feature:shoutouts') {
  dependencies {
    implementation project(':base')
    implementation project(':platform')
    implementation project(':protobuf')
    implementation 'info.picocli:picocli:3.8.2'
    testFrameworkImplementation project(path: ':base', configuration: 'testFramework')
    testFrameworkImplementation project(path: ':platform', configuration: 'testFramework')
    testFrameworkImplementation project(path: ':protobuf', configuration: 'testFramework')
  }
}

project(':feature:wouldyourather') {
  dependencies {
    implementation project(':base')
    implementation project(':platform')
    implementation 'info.picocli:picocli:3.8.2'
    testFrameworkImplementation project(path: ':base', configuration: 'testFramework')
    testFrameworkImplementation project(path: ':platform', configuration: 'testFramework')
  }
}

/*******************************
 * APPLICATION WITH ALL PROJECTS
 */

project(':all') {
  apply plugin: 'application'

  mainClassName = 'tv.mechjack.mechjackbot.main.Main'

  application {
    applicationDefaultJvmArgs = ['-Dtv.mechjack.mechjackbot.webapp.WebApplicationModule.resource_base=/Users/mechjack/Documents/mechjackbot/base/build/webpack/main']
  }

  dependencies {
    runtimeOnly project(':feature:core')
    runtimeOnly project(':feature:customcommands')
    runtimeOnly project(':feature:shoutouts')
    runtimeOnly project(':feature:wouldyourather')
    runtimeOnly 'org.slf4j:slf4j-simple:1.+'
  }

  distributions {
    main {
      baseName = "mechjackbot-${project.getProperty('name')}"
    }
  }
  startScripts {
    applicationName = 'mechjackbot'
  }
}
